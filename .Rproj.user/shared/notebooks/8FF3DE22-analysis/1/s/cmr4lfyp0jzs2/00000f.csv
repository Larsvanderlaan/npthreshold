"0","library(future)"
"0","plan(multisession, workers = 6)"
"0",""
"0","run_analysis <- function(tf, data_surv, covariates, failure_time, event_type, weights, marker = NULL, nbins_time = 20, nbins_threshold = 20) {"
"0","   # effectivelly removed observations with no weights"
"0","  data_surv <- as.data.table(na.omit(data_surv))"
"0","  # discretize"
"0","  time_grid <- unique(quantile(data_surv[[failure_time]], seq(0,1, length = nbins_time+1), type = 1))"
"0","  failure_time_discrete <- findInterval(data_surv[[failure_time]], time_grid, all.inside = TRUE)"
"0","  tf_discrete <- findInterval(tf, time_grid, all.inside = TRUE)"
"0","  data_surv[[failure_time]] <-failure_time_discrete"
"0","  "
"0","  "
"0","  # time-dependent learners"
"0","  # -- Superlearners of single covariate glm (one-way and two-wau)"
"0","  sl_glm_oneway_t <- Lrnr_sl$new(learners = lapply(covariates, function(var) {"
"0","    var <- c(var, ""treatment"", ""t"")"
"0","    Lrnr_glm_fast$new(formula =  ~ . , covariates = var)"
"0","  }), Lrnr_nnls$new())"
"0","  sl_glm_twoway_t <- Lrnr_sl$new(learners = lapply(covariates, function(var) {"
"0","    var <- c(var, ""treatment"", ""t"")"
"0","    Lrnr_glm_fast$new(formula =  ~ . + t*treatment, covariates = var)"
"0","  }), metalearner = Lrnr_nnls$new(), "
"0","  fold_fun = origami::folds_vfold, V = 5)"
"0","  # superlearner of single covariate GAMS"
"0","  sl_gam_t <- Lrnr_sl$new(learners = lapply(covariates, function(var) {"
"0","    var <- c(var, ""treatment"", ""t"")"
"0","    Lrnr_gam$new(covariates = var)"
"0","  }"
"0","  ), metalearner = Lrnr_nnls$new(),"
"0","  fold_fun = origami::folds_vfold, V = 5)"
"0","  # Kaplan Meiier using HAL"
"0","  Lrnr_KM <- Lrnr_hal9001$new(formula = ~  h(t, k = 20, pf = 0, s = 0), smoothness_orders = 0)"
"0","  # COX using HAL"
"0","  Lrnr_cox <- Lrnr_hal9001$new(formula = ~ h(., k =1, s = 1) + h(t, k = 20, pf = 0, s = 0), smoothness_orders = 1)"
"0","  # baseline learners"
"0","  sl_glm_oneway <- Lrnr_sl$new(learners = lapply(covariates, function(var) {"
"0","    var <- c(var)"
"0","    Lrnr_glm$new(  covariates = var, family = binomial())"
"0","  }), metalearner = Lrnr_nnls$new(),"
"0","  fold_fun = origami::folds_vfold, V = 5)"
"0","  sl_gam <- Lrnr_sl$new(learners = lapply(covariates, function(var) {"
"0","    var <- c(var)"
"0","    Lrnr_gam$new(covariates = var, family = binomial())"
"0","  }"
"0","  ), metalearner = Lrnr_nnls$new(),"
"0","  fold_fun = origami::folds_vfold, V = 5)"
"0","  "
"0","  "
"0","  "
"0","  "
"0","  # learning ensemble for censoring time hazard"
"0","  stack.failure <- Stack$new("
"0","    sl_glm_oneway_t, # stacked one-way glms"
"0","    sl_glm_twoway_t, # stacked two-way glms"
"0","    sl_gam_t, # stacked gams"
"0","    Lrnr_glmnet$new(),"
"0","    Lrnr_cox,"
"0","    Lrnr_KM,"
"0","    Lrnr_glmnet$new(formula = ~ . + treatment + t + treatment * t),"
"0","    Lrnr_mean$new()"
"0","  )"
"0","  stack.censoring <- stack.failure"
"0","  learner.event_type <- stack.failure"
"0","  learner.treatment <- Stack$new("
"0","    sl_glm_oneway, sl_gam, Lrnr_mean$new(),"
"0","    Lrnr_glmnet$new(),   Lrnr_bayesglm$new())"
"0","  "
"0","  "
"0","  "
"0","  # TODO"
"0","  learner.treatment <- stack.failure <- stack.censoring <- learner.event_type <- Lrnr_gam$new()"
"0","  stack.failure <- stack.censoring <- Lrnr_hal9001$new(formula = ~ h(., k =1, s = 1) + h(t, k = 20, pf = 0, s = 0), smoothness_orders = 1)"
"0","  data_surv <- copy(data_surv)"
"0","  treatment <- ""treatment"""
"0","  # if no marker, then just get overall risk estimae"
"0","  if(is.null(marker)) {"
"0","    data_surv$treatment <- 1"
"0","    survout <- survtmle3_discrete(data_surv[[failure_time]], data_surv[[event_type]],"
"0","                                  data_surv[[treatment]], data_surv[, covariates, with = FALSE],"
"0","                                  weights = data_surv[[weights]],"
"0","                                  learner.treatment =  Lrnr_mean$new(),"
"0","                                  learner.failure_time =  stack.failure,"
"0","                                  learner.censoring_time = stack.censoring,"
"0","                                  learner.event_type = learner.event_type,"
"0","                                  target_failure_time = tf_discrete,"
"0","                                  target_treatment = c(1),"
"0","                                  target_event_type = 1,"
"0","                                  failure_time.stratify_by_time = FALSE,"
"0","                                  censoring_time.stratify_by_time = FALSE,"
"0","                                  cross_fit = FALSE,"
"0","                                  cross_validate = FALSE,"
"0","                                  calibrate = FALSE,"
"0","                                  verbose = TRUE, max_iter = 100)"
"0","  } else {"
"0","    "
"0","    # if marker, tun threshold analysis"
"0","    threshold_list <- sort(unique(data[[marker]][data_surv[[event_type]]==1]))"
"0","    threshold_list <- unique(quantile(threshold_list, seq(0, 1, length = nbins_threshold), type = 1))"
"0","    "
"0","    treatment <- ""treatment"""
"0","    out_list <- list()"
"0","    for(threshold in threshold_list  ) {"
"0","      data_surv[[treatment]] <- 1*(data_surv[[marker]] >= threshold)"
"0","      if(sum(1*(data_surv[[marker]] >= threshold)) > 30) {"
"0","        #print(mean(1*(data_surv[[marker]] >= threshold)))"
"0","        survout <- survtmle3_discrete(data_surv[[failure_time]], data_surv[[event_type]],"
"0","                                      data_surv[[treatment]], data_surv[, covariates, with = FALSE],"
"0","                                      weights = data_surv[[weights]],"
"0","                                      learner.treatment =  learner.treatment,"
"0","                                      learner.failure_time =  stack.failure,"
"0","                                      learner.censoring_time = stack.censoring,"
"0","                                      learner.event_type = learner.event_type,"
"0","                                      target_failure_time = tf_discrete,"
"0","                                      target_treatment = c(1),"
"0","                                      target_event_type = 1,"
"0","                                      failure_time.stratify_by_time = FALSE,"
"0","                                      censoring_time.stratify_by_time = FALSE,"
"0","                                      cross_fit = FALSE,"
"0","                                      cross_validate = FALSE,"
"0","                                      calibrate = FALSE,"
"0","                                      verbose = TRUE, max_iter = 100)"
"0","        "
"0","        survout$threshold <- threshold"
"0","        out_list[[paste0(threshold)]] <- survout"
"0","      }"
"0","      "
"0","    }"
"0","    output <- rbindlist(out_list)"
"0","    return(output)"
"0","  }"
"0","}"
"0",""
"0","out_list[[1]]"
"2","Error: object 'out_list' not found
"
