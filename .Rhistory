& data_placebo$Perprotocol == 1
& data_placebo$TwophasesampIndD29 == 1
& !any(is.na(data_placebo[[variant_type]]))
))
#### Analysis for treated
## get reference time for survival analysis
output_treated <- run_analysis(tf = tf,
data_surv = data_treated,
covariates = covariates,
failure_time = failure_time,
event_type = event_type_target,
weights = weights,
marker = marker,
nbins_time = 20,
nbins_threshold = 20)
library(sl3)
library(data.table)
library(assertthat)
# relevant variables
subset_region <- "la"
weights_twostage <- "wt.D29" #"wt.D29start1"
covariates <- c("standardized_risk_score", "Sex") #c("HighRiskInd", "Sex", "age.geq.65","standardized_risk_score")
failure_time <- "EventTimePrimaryD29"
event_type <- "EventIndPrimaryMolecConfirmedD29"
viral_load <- "seq1.log10vl"
marker <- paste0("Day29pseudoneutid50", subset_region)
variant_type <- "seq1.variant.hotdeck1"
Perprotocol <- "Perprotocol"
TwophasesampIndD29 <- "TwophasesampIndD29"
Trt <- "Trt"
# get data
data <- setDT(fread(paste0("data/janssen_", subset_region, "_partA_data_processed_with_riskscore_hotdeckv4.csv")))
subset <- which(data[[Perprotocol]] == 1)
data <- data[subset]
# subset vaccine and placebo arm, per protocol, and in phase-two-sample (for day 29 marker)
#sum(is.na(data$seq1.variant.hotdeck5[data$Trt == 1 & !is.na(data$wt.D29) &  !is.na(data$EventIndPrimaryMolecConfirmedD29) & data$EventIndPrimaryMolecConfirmedD29 == 1]))
# sum(is.na(data$seq1.variant.hotdeck5[data$Trt == 0 & !is.na(data$EventIndPrimaryMolecConfirmedD29) & data$EventIndPrimaryMolecConfirmedD29 == 1]))
data <- data[, c(weights_twostage, marker, event_type, failure_time, covariates, variant_type, Perprotocol, TwophasesampIndD29, Trt , viral_load, "EventIndPrimaryD29"), with = FALSE]
# make competing risk indicators
variant_strata <- c("Ancestral.Lineage" = 181 ,
"Zeta" = 176,
"Lambda" = 77,
"Mu" = 175,
"Gamma" = 181
)
variant_names <- names(variant_strata)
for(variant in variant_names) {
event_type_key <- paste0(event_type, "_", variant )
value <- data[[event_type]]
value[is.na(value)] <- -1
value[!is.na(value) & value==1] <- ifelse(data[[variant_type]][!is.na(value) & value==1] == variant, 1, 2)
# Any remaining NAS are assigned a competing risk
value[value == -1] <- NA
value[is.na(value)] <- 2
data[, (event_type_key) := value]
}
head(data)
# specify variant
variant <- variant_names[[1]]
# use competing weights
weights <- weights_twostage
# Run competing risk analysis
tf <- variant_strata[paste0(variant)]
event_type_target <- paste0(event_type, "_", variant)
# for CR only, remove observations without variant information
#if(event_type != event_type_target) {
# data <- data[!is.na(data[[variant_type]])]
#}
# make datasets of placebo and treated analysis
subset_treated <- data[[Trt]]==1
data_placebo <- data[!subset_treated]
data_treated <- data[subset_treated]
subset <- which(data_treated[[TwophasesampIndD29]] == 1)
data_treated <- data_treated[subset]  # assumes TwophasesampIndD29 used only for treatment arm
# subset to reelvant variables
data_treated <- data_treated[, c(covariates, failure_time, event_type_target, marker, weights), with = FALSE]
data_placebo <-  data_placebo[, c(covariates, failure_time, event_type_target), with = FALSE]
assert_that(all(
data_treated$Trt == 1
& data_treated$Perprotocol == 1
& data_treated$TwophasesampIndD29 == 1
& !any(is.na(data_treated[[variant_type]]))
))
assert_that(all(
data_placebo$Trt == 0
& data_placebo$Perprotocol == 1
& data_placebo$TwophasesampIndD29 == 1
& !any(is.na(data_placebo[[variant_type]]))
))
#### Analysis for treated
## get reference time for survival analysis
output_treated <- run_analysis(tf = tf,
data_surv = data_treated,
covariates = covariates,
failure_time = failure_time,
event_type = event_type_target,
weights = weights,
marker = marker,
nbins_time = 20,
nbins_threshold = 20)
library(npsurvival)
library(data.table)
library(assertthat)
# relevant variables
subset_region <- "la"
weights_twostage <- "wt.D29" #"wt.D29start1"
covariates <- c("standardized_risk_score", "Sex") #c("HighRiskInd", "Sex", "age.geq.65","standardized_risk_score")
failure_time <- "EventTimePrimaryD29"
event_type <- "EventIndPrimaryMolecConfirmedD29"
viral_load <- "seq1.log10vl"
marker <- paste0("Day29pseudoneutid50", subset_region)
variant_type <- "seq1.variant.hotdeck1"
Perprotocol <- "Perprotocol"
TwophasesampIndD29 <- "TwophasesampIndD29"
Trt <- "Trt"
# get data
data <- setDT(fread(paste0("data/janssen_", subset_region, "_partA_data_processed_with_riskscore_hotdeckv4.csv")))
subset <- which(data[[Perprotocol]] == 1)
data <- data[subset]
# subset vaccine and placebo arm, per protocol, and in phase-two-sample (for day 29 marker)
#sum(is.na(data$seq1.variant.hotdeck5[data$Trt == 1 & !is.na(data$wt.D29) &  !is.na(data$EventIndPrimaryMolecConfirmedD29) & data$EventIndPrimaryMolecConfirmedD29 == 1]))
# sum(is.na(data$seq1.variant.hotdeck5[data$Trt == 0 & !is.na(data$EventIndPrimaryMolecConfirmedD29) & data$EventIndPrimaryMolecConfirmedD29 == 1]))
data <- data[, c(weights_twostage, marker, event_type, failure_time, covariates, variant_type, Perprotocol, TwophasesampIndD29, Trt , viral_load, "EventIndPrimaryD29"), with = FALSE]
# make competing risk indicators
variant_strata <- c("Ancestral.Lineage" = 181 ,
"Zeta" = 176,
"Lambda" = 77,
"Mu" = 175,
"Gamma" = 181
)
variant_names <- names(variant_strata)
for(variant in variant_names) {
event_type_key <- paste0(event_type, "_", variant )
value <- data[[event_type]]
value[is.na(value)] <- -1
value[!is.na(value) & value==1] <- ifelse(data[[variant_type]][!is.na(value) & value==1] == variant, 1, 2)
# Any remaining NAS are assigned a competing risk
value[value == -1] <- NA
value[is.na(value)] <- 2
data[, (event_type_key) := value]
}
head(data)
# specify variant
variant <- variant_names[[1]]
# use competing weights
weights <- weights_twostage
# Run competing risk analysis
tf <- variant_strata[paste0(variant)]
event_type_target <- paste0(event_type, "_", variant)
# for CR only, remove observations without variant information
#if(event_type != event_type_target) {
# data <- data[!is.na(data[[variant_type]])]
#}
# make datasets of placebo and treated analysis
subset_treated <- data[[Trt]]==1
data_placebo <- data[!subset_treated]
data_treated <- data[subset_treated]
subset <- which(data_treated[[TwophasesampIndD29]] == 1)
data_treated <- data_treated[subset]  # assumes TwophasesampIndD29 used only for treatment arm
# subset to reelvant variables
data_treated <- data_treated[, c(covariates, failure_time, event_type_target, marker, weights), with = FALSE]
data_placebo <-  data_placebo[, c(covariates, failure_time, event_type_target), with = FALSE]
assert_that(all(
data_treated$Trt == 1
& data_treated$Perprotocol == 1
& data_treated$TwophasesampIndD29 == 1
& !any(is.na(data_treated[[variant_type]]))
))
assert_that(all(
data_placebo$Trt == 0
& data_placebo$Perprotocol == 1
& data_placebo$TwophasesampIndD29 == 1
& !any(is.na(data_placebo[[variant_type]]))
))
#### Analysis for treated
## get reference time for survival analysis
output_treated <- run_analysis(tf = tf,
data_surv = data_treated,
covariates = covariates,
failure_time = failure_time,
event_type = event_type_target,
weights = weights,
marker = marker,
nbins_time = 20,
nbins_threshold = 20)
# make survival dataset
output_treated$estimates
output_treated
output_treated$estimates <- unlist( output_treated$estimates )
output_treated$estimates <- unlist( output_treated$estimates )
output_treated$times <- unlist( output_treated$times )
output_treated
tf
0, nbins_threshold = 20) {
data_surv <- as.data.table(data_surv)
data_surv <- data_treated
data_surv <- as.data.table(data_surv)
# effectivelly removed observations with no weights
data_surv <- na.omit(data_surv[, c(covariates, failure_time, event_type, marker, weights), with = FALSE ])
failure_time
time_grid <- unique(quantile(data_surv[[failure_time]], seq(0,1, length = nbins_time+1), type = 1))
nbins_time = 20
time_grid <- unique(quantile(data_surv[[failure_time]], seq(0,1, length = nbins_time+1), type = 1))
failure_time_discrete <- findInterval(data_surv[[failure_time]], time_grid, all.inside = TRUE)
tf_discrete <- findInterval(tf, time_grid, all.inside = FALSE)
data_surv[[failure_time]] <-failure_time_discrete
tf_discrete
failure_time_discrete
table(failure_time_discrete)
time_grid
max( findInterval(tf, time_grid, all.inside = FALSE))
max( findInterval(tf, time_grid, all.inside = TRUE))
time_grid
library(future)
library(sl3)
plan(multisession, workers = 6)
run_analysis <- function(tf, data_surv, covariates, failure_time, event_type, weights , marker = NULL, nbins_time = 20, nbins_threshold = 20) {
data_surv <- as.data.table(data_surv)
# effectivelly removed observations with no weights
data_surv <- na.omit(data_surv[, c(covariates, failure_time, event_type, marker, weights), with = FALSE ])
# discretize
time_grid <- unique(quantile(data_surv[[failure_time]], seq(0,1, length = nbins_time+1), type = 1))
failure_time_discrete <- findInterval(data_surv[[failure_time]], time_grid, all.inside = TRUE)
tf_discrete <- findInterval(tf, time_grid, all.inside = FALSE)
data_surv[[failure_time]] <-failure_time_discrete
# time-dependent learners
# -- Superlearners of single covariate glm (one-way and two-wau)
sl_glm_oneway_t <- Lrnr_sl$new(learners = lapply(covariates, function(var) {
var <- c(var, "treatment", "t")
Lrnr_glm_fast$new(formula =  ~ . , covariates = var)
}), Lrnr_nnls$new())
sl_glm_twoway_t <- Lrnr_sl$new(learners = lapply(covariates, function(var) {
var <- c(var, "treatment", "t")
Lrnr_glm_fast$new(formula =  ~ . + t*treatment, covariates = var)
}), metalearner = Lrnr_nnls$new(),
fold_fun = origami::folds_vfold, V = 5)
# superlearner of single covariate GAMS
sl_gam_t <- Lrnr_sl$new(learners = lapply(covariates, function(var) {
var <- c(var, "treatment", "t")
Lrnr_gam$new(covariates = var)
}
), metalearner = Lrnr_nnls$new(),
fold_fun = origami::folds_vfold, V = 5)
# Kaplan Meiier using HAL
Lrnr_KM <- Lrnr_hal9001$new(formula = ~  h(t, k = 20, pf = 0, s = 0), smoothness_orders = 0)
# COX using HAL
Lrnr_cox <- Lrnr_hal9001$new(formula = ~ h(., k =1, s = 1) + h(t, k = 20, pf = 0, s = 0), smoothness_orders = 1)
# baseline learners
sl_glm_oneway <- Lrnr_sl$new(learners = lapply(covariates, function(var) {
var <- c(var)
Lrnr_glm$new(  covariates = var, family = binomial())
}), metalearner = Lrnr_nnls$new(),
fold_fun = origami::folds_vfold, V = 5)
sl_gam <- Lrnr_sl$new(learners = lapply(covariates, function(var) {
var <- c(var)
Lrnr_gam$new(covariates = var, family = binomial())
}
), metalearner = Lrnr_nnls$new(),
fold_fun = origami::folds_vfold, V = 5)
# learning ensemble for censoring time hazard
stack.failure <- Stack$new(
sl_glm_oneway_t, # stacked one-way glms
sl_glm_twoway_t, # stacked two-way glms
sl_gam_t, # stacked gams
Lrnr_glmnet$new(),
Lrnr_cox,
Lrnr_KM,
Lrnr_glmnet$new(formula = ~ . + treatment + t + treatment * t),
Lrnr_mean$new()
)
stack.censoring <- stack.failure
learner.event_type <- stack.failure
learner.treatment <- Stack$new(
sl_glm_oneway, sl_gam, Lrnr_mean$new(),
Lrnr_glmnet$new(),   Lrnr_bayesglm$new())
# TODO
learner.treatment <- stack.failure <- stack.censoring <- learner.event_type <- Lrnr_gam$new()
stack.failure <- stack.censoring <- Lrnr_hal9001$new(formula = ~ h(., k =1, s = 1) + h(t, k = 20, pf = 0, s = 0), smoothness_orders = 1)
data_surv <- copy(data_surv)
treatment <- "treatment"
# if no marker, then just get overall risk estimae
if(is.null(marker)) {
data_surv$treatment <- 1
survout <- survtmle3_discrete(data_surv[[failure_time]], data_surv[[event_type]],
data_surv[[treatment]], data_surv[, covariates, with = FALSE],
weights = data_surv[[weights]],
learner.treatment =  Lrnr_glmnet$new(),
learner.failure_time =   Lrnr_glmnet$new(),
learner.censoring_time =  Lrnr_glmnet$new(),
learner.event_type =  Lrnr_glmnet$new(),
target_failure_time = tf_discrete,
target_treatment = c(1),
target_event_type = 1,
failure_time.stratify_by_time = FALSE,
censoring_time.stratify_by_time = FALSE,
cross_fit = FALSE,
cross_validate = FALSE,
calibrate = FALSE,
verbose = TRUE, max_iter = 100)
} else {
# if marker, tun threshold analysis
threshold_list <- sort(unique(data[[marker]][data_surv[[event_type]]==1]))
threshold_list <- unique(quantile(threshold_list, seq(0, 1, length = nbins_threshold), type = 1))
treatment <- "treatment"
out_list <- list()
for(threshold in threshold_list  ) {
data_surv[[treatment]] <- 1*(data_surv[[marker]] >= threshold)
if(sum(1*(data_surv[[marker]] >= threshold)) > 30) {
#print(mean(1*(data_surv[[marker]] >= threshold)))
survout <- survtmle3_discrete(data_surv[[failure_time]], data_surv[[event_type]],
data_surv[[treatment]], data_surv[, covariates, with = FALSE],
weights = data_surv[[weights]],
learner.treatment =  Lrnr_glmnet$new(),
learner.failure_time =  Lrnr_glmnet$new(),
learner.censoring_time = Lrnr_glmnet$new(),
learner.event_type = Lrnr_glmnet$new(),
target_failure_time = tf_discrete,
target_treatment = c(1),
target_event_type = 1,
failure_time.stratify_by_time = FALSE,
censoring_time.stratify_by_time = FALSE,
cross_fit = FALSE,
cross_validate = FALSE,
calibrate = FALSE,
verbose = TRUE, max_iter = 100)
survout$threshold <- threshold
out_list[[paste0(threshold)]] <- survout
}
}
output <- rbindlist(out_list)
return(output)
}
}
out_list[[1]]
weights
event_type_target
failure_time
library(npsurvival)
library(data.table)
library(assertthat)
# relevant variables
subset_region <- "la"
weights_twostage <- "wt.D29" #"wt.D29start1"
covariates <- c("standardized_risk_score", "Sex") #c("HighRiskInd", "Sex", "age.geq.65","standardized_risk_score")
failure_time <- "EventTimePrimaryD29"
event_type <- "EventIndPrimaryMolecConfirmedD29"
viral_load <- "seq1.log10vl"
marker <- paste0("Day29pseudoneutid50", subset_region)
variant_type <- "seq1.variant.hotdeck1"
Perprotocol <- "Perprotocol"
TwophasesampIndD29 <- "TwophasesampIndD29"
Trt <- "Trt"
# get data
data <- setDT(fread(paste0("data/janssen_", subset_region, "_partA_data_processed_with_riskscore_hotdeckv4.csv")))
subset <- which(data[[Perprotocol]] == 1)
data <- data[subset]
# subset vaccine and placebo arm, per protocol, and in phase-two-sample (for day 29 marker)
#sum(is.na(data$seq1.variant.hotdeck5[data$Trt == 1 & !is.na(data$wt.D29) &  !is.na(data$EventIndPrimaryMolecConfirmedD29) & data$EventIndPrimaryMolecConfirmedD29 == 1]))
# sum(is.na(data$seq1.variant.hotdeck5[data$Trt == 0 & !is.na(data$EventIndPrimaryMolecConfirmedD29) & data$EventIndPrimaryMolecConfirmedD29 == 1]))
data <- data[, c(weights_twostage, marker, event_type, failure_time, covariates, variant_type, Perprotocol, TwophasesampIndD29, Trt , viral_load, "EventIndPrimaryD29"), with = FALSE]
# make competing risk indicators
variant_strata <- c("Ancestral.Lineage" = 181 ,
"Zeta" = 176,
"Lambda" = 77,
"Mu" = 175,
"Gamma" = 181
)
variant_names <- names(variant_strata)
for(variant in variant_names) {
event_type_key <- paste0(event_type, "_", variant )
value <- data[[event_type]]
value[is.na(value)] <- -1
value[!is.na(value) & value==1] <- ifelse(data[[variant_type]][!is.na(value) & value==1] == variant, 1, 2)
# Any remaining NAS are assigned a competing risk
value[value == -1] <- NA
value[is.na(value)] <- 2
data[, (event_type_key) := value]
}
head(data)
# specify variant
variant <- variant_names[[1]]
# use competing weights
weights <- weights_twostage
# Run competing risk analysis
tf <- variant_strata[paste0(variant)]
event_type_target <- paste0(event_type, "_", variant)
# for CR only, remove observations without variant information
#if(event_type != event_type_target) {
# data <- data[!is.na(data[[variant_type]])]
#}
# make datasets of placebo and treated analysis
subset_treated <- data[[Trt]]==1
data_placebo <- data[!subset_treated]
data_treated <- data[subset_treated]
subset <- which(data_treated[[TwophasesampIndD29]] == 1)
data_treated <- data_treated[subset]  # assumes TwophasesampIndD29 used only for treatment arm
# subset to reelvant variables
data_treated <- data_treated[, c(covariates, failure_time, event_type_target, marker, weights), with = FALSE]
data_placebo <-  data_placebo[, c(covariates, failure_time, event_type_target), with = FALSE]
assert_that(all(
data_treated$Trt == 1
& data_treated$Perprotocol == 1
& data_treated$TwophasesampIndD29 == 1
& !any(is.na(data_treated[[variant_type]]))
))
assert_that(all(
data_placebo$Trt == 0
& data_placebo$Perprotocol == 1
& data_placebo$TwophasesampIndD29 == 1
& !any(is.na(data_placebo[[variant_type]]))
))
#### Analysis for treated
## get reference time for survival analysis
output_treated <- run_analysis(tf = tf,
data_surv = data_treated,
covariates = covariates,
failure_time = failure_time,
event_type = event_type_target,
weights = weights,
marker = marker,
nbins_time = 20,
nbins_threshold = 20)
# make survival dataset
output_treated$estimates <- unlist( output_treated$estimates )
output_treated$times <- unlist( output_treated$times )
output_treated
output_treated
devtools::document()
library(data.table)
library(assertthat)
# relevant variables
subset_region <- "la"
weights_twostage <- "wt.D29" #"wt.D29start1"
covariates <- c("standardized_risk_score", "Sex") #c("HighRiskInd", "Sex", "age.geq.65","standardized_risk_score")
failure_time <- "EventTimePrimaryD29"
event_type <- "EventIndPrimaryMolecConfirmedD29"
viral_load <- "seq1.log10vl"
marker <- paste0("Day29pseudoneutid50", subset_region)
variant_type <- "seq1.variant.hotdeck1"
Perprotocol <- "Perprotocol"
TwophasesampIndD29 <- "TwophasesampIndD29"
Trt <- "Trt"
# get data
data <- setDT(fread(paste0("data/janssen_", subset_region, "_partA_data_processed_with_riskscore_hotdeckv4.csv")))
subset <- which(data[[Perprotocol]] == 1)
data <- data[subset]
# subset vaccine and placebo arm, per protocol, and in phase-two-sample (for day 29 marker)
#sum(is.na(data$seq1.variant.hotdeck5[data$Trt == 1 & !is.na(data$wt.D29) &  !is.na(data$EventIndPrimaryMolecConfirmedD29) & data$EventIndPrimaryMolecConfirmedD29 == 1]))
# sum(is.na(data$seq1.variant.hotdeck5[data$Trt == 0 & !is.na(data$EventIndPrimaryMolecConfirmedD29) & data$EventIndPrimaryMolecConfirmedD29 == 1]))
data <- data[, c(weights_twostage, marker, event_type, failure_time, covariates, variant_type, Perprotocol, TwophasesampIndD29, Trt , viral_load, "EventIndPrimaryD29"), with = FALSE]
# make competing risk indicators
variant_strata <- c("Ancestral.Lineage" = 181 ,
"Zeta" = 176,
"Lambda" = 77,
"Mu" = 175,
"Gamma" = 181
)
variant_names <- names(variant_strata)
for(variant in variant_names) {
event_type_key <- paste0(event_type, "_", variant )
value <- data[[event_type]]
value[is.na(value)] <- -1
value[!is.na(value) & value==1] <- ifelse(data[[variant_type]][!is.na(value) & value==1] == variant, 1, 2)
# Any remaining NAS are assigned a competing risk
value[value == -1] <- NA
value[is.na(value)] <- 2
data[, (event_type_key) := value]
}
head(data)
# specify variant
variant <- variant_names[[1]]
# use competing weights
weights <- weights_twostage
# Run competing risk analysis
tf <- variant_strata[paste0(variant)]
event_type_target <- paste0(event_type, "_", variant)
# for CR only, remove observations without variant information
#if(event_type != event_type_target) {
# data <- data[!is.na(data[[variant_type]])]
#}
# make datasets of placebo and treated analysis
subset_treated <- data[[Trt]]==1
data_placebo <- data[!subset_treated]
data_treated <- data[subset_treated]
subset <- which(data_treated[[TwophasesampIndD29]] == 1)
data_treated <- data_treated[subset]  # assumes TwophasesampIndD29 used only for treatment arm
# subset to reelvant variables
data_treated <- data_treated[, c(covariates, failure_time, event_type_target, marker, weights), with = FALSE]
data_placebo <-  data_placebo[, c(covariates, failure_time, event_type_target), with = FALSE]
assert_that(all(
data_treated$Trt == 1
& data_treated$Perprotocol == 1
& data_treated$TwophasesampIndD29 == 1
& !any(is.na(data_treated[[variant_type]]))
))
assert_that(all(
data_placebo$Trt == 0
& data_placebo$Perprotocol == 1
& data_placebo$TwophasesampIndD29 == 1
& !any(is.na(data_placebo[[variant_type]]))
))
#### Analysis for treated
## get reference time for survival analysis
output_treated <- run_analysis(tf = tf,
data_surv = data_treated,
covariates = covariates,
failure_time = failure_time,
event_type = event_type_target,
weights = weights,
marker = marker,
nbins_time = 20,
nbins_threshold = 20)
